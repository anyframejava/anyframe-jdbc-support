<chapter id="jdbcsupport_injectionandlogging_introduction">
		<title>구현 배경</title>


		<section id="jdbcsupport_injectionandlogging_introduction_requirement">
        	<title>사용자 요구사항</title>

        	<itemizedlist>
          		<listitem>
            		<para>SQL Injection 보안 위험을 방어할 수 있는 기능에 대한 사용자 요구사항 구현 방안</para>
          		</listitem>
          		<listitem>
            		<para>최종 실행 SQL 문 (preparedStatement 의 바인드 변수까지 반영된)을 확인 및 재처리할 수 있는 기능에 대한 사용자 요구사항 구현 방안</para>
          		</listitem>
          	</itemizedlist>
          		
         	<para>SQL Logging 관련 기 존재하는 오픈소스 기능(ex. log4jdbc) 등이 있으나 SQL Formatting 알아보기 어렵게 변경되고, logging 외 추가적인 처리가 불가한 문제점 등이 존재한다.</para>

			<para>위 InjectionPattern / CompleteQuery 는 서로 관련성이 있다. InjectionPattern 의 판별 후 replace 처리 등을 거친 SQL 문을 최종 실행할 때 확인/재처리 할 수 있어야 한다.</para>
			<para>위의 두가지 요구사항은 queryService 등 특정 구현에서 많이 아니라 jdbc 기반의 일반적인 persistence 처리에 동일하게 적용할 수 있다면 더 좋을 것이다.</para>
			<para>결론적으로 log4jdbc 등의 오픈소스 DataSource Spy 와 같은 형태로 DataSource 기반의 Connection 을 wrapping 하여 실제 실행되는 sql 을 변경 및 재처리 하는 것이 바람직하지만 log4jdbc 를 사용하는 것은 불가능 하였다.
    			cf.) log4jdbc 는 SQL Logging 만을 위한 구현으로 Logging 을 위한 바인드 변수 데이터 등을 Wrapping 한 Statement 모듈에 미리 가지고 있다가 jdbc.sqlonly 등의 logger 설정에 따라 로그로 
    			출력하는 기능만을 고려하여 만들어졌으며, 확장한다 하더라도 SQL 문의 변경 등은 불가능함을 확인하였음</para>
        	
		</section>



		<section id="jdbcsupport_injectionandlogging_introduction_p6spy">
        	<title>p6spy</title>

        	<para>
        		P6Spy 도 마찬가지로 유사한 JDBC proxy 이다. CompleteQuery 처리를 위한 preparedStatement 의 바인드 변수 로깅 등이 가능하면서 JDBC call 을 delegate 하므로 이를 적절히 확장하면 
        		쿼리에 대한 재처리를 적용하여 JDBC 를 실행하는 것도 가능하다.
    			cf.) P6Spy 의 spy.properties 설정은 번거롭고 해당 기능을 사용한 Logging 도 사용치 않을 것이므로 anyframe-jdbc-support 에서는 P6Factory 확장과 AOP 형식으로 사용한다.
    			 (ex. infrared-agent 와 동일한 방식)
        	</para>
      	</section>
</chapter>
