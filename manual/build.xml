<?xml version="1.0"?>
<!--
  - 
  -->
<project name="Anyframe_Jdbc-Support_Plugin_Docbook" default="all" xmlns:artifact="urn:maven-artifact-ant">

	<description>
            This Ant build.xml file is used to transform DocBook XML to various
    </description>
	
	<!-- set env for using svn id/password -->
	<property environment="env" />
	<property name="subv.username" value="${env.SVN_USER}" />
	<property name="subv.password" value="${env.SVN_PASSWORD}" />

	<property name="book.name" value="jdbc-support" />
	<property name="version" value="1.0.4"/>
	<property name="service.name" value="anyframe-jdbc-support" />
	
	<!-- set dbf installer folder and sample project folder -->
	<property name="dbf.home" value="E:/workspace/docbook" />
	<property name="sample.home" value="E:/workspace/sample/${book.name}/${version}" />
	<property name="service.home" value="E:/workspace/service/${book.name}/${version}" />
	<property name="plugin.type" value="optional" />
	<property name="result.dir" value="E:/Repo/anyframe-opensource/docs/anyframe/plugin/${plugin.type}"/>
	
	
	<!-- Configure basic properties that will be used in the file -->
	<property name="docbook.xsl.dir" value="${dbf.home}/stylesheet/docbook-xsl" />
	<property name="css.dir" value="${dbf.home}/css" />
	<property name="image.dir" value="image" />
	<property name="download.dir" value="download" />
	<property name="font.dir" value="${dbf.home}/fonts" />
	<property name="target.dir" value="target/${book.name}/${version}/reference" /> 
	<property name="html.dir" value="${target.dir}/html" />
	<property name="htmlsingle.dir" value="${target.dir}/htmlsingle" />
	<property name="fo.dir" value="${target.dir}/fo" />
	<property name="pdf.dir" value="${target.dir}/pdf" />
	<property name="sample.dir" value="${target.dir}/sample" />
	<property name="src.dir" value="doc" />
	<property name="src.tmp" value="doc/temp" />
	<property name="xalan.lib.dir" value="${dbf.home}/software/fop/lib" />
	
	<!-- svn repository properties for service project -->
	<property name="subv.url.service.trunk" value="http://dev.anyframejava.org/subv/anyframe-opensource/anyframe/trunk/plugin/${plugin.type}/${book.name}/projects/${service.name}" />
	<property name="subv.url.service.tags" value="http://dev.anyframejava.org/subv/anyframe-opensource/anyframe/tags/plugin/${plugin.type}/${book.name}/${version}/projects/${service.name}" />

	<!-- Usage of the differect style sheets which will be used for the transformation -->
	<property name="html.stylesheet" value="${docbook.xsl.dir}/anyframe/html/html.xsl" />
	<property name="chunk-html.stylesheet" value="${docbook.xsl.dir}/anyframe/html/chunk.xsl" />
	<property name="dbk.fo.stylesheet" value="${docbook.xsl.dir}/anyframe/pdf/pdf.xsl" />

	<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
		<classpath>
			<fileset dir="${dbf.home}/software/fop/lib">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${dbf.home}/software/fop/build">
				<include name="fop.jar" />
				<include name="fop-hyph.jar" />
			</fileset>

		</classpath>
	</taskdef>
	
	<!-- Ant Contrib Settings -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${env.ANT_HOME}/lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!-- Subversion_ANT Settings -->
	<path id="svnant.classpath">
		<fileset dir="${env.ANT_HOME}/lib">
			<include name="svnjavahl.jar" />
			<include name="svnant.jar" />
			<include name="svnClientAdapter.jar" />
		</fileset>
	</path>
	<typedef resource="svntask.properties" classpathref="svnant.classpath" />
			
	<!-- Maven Ant Tasks Settings -->
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
		<classpath>
			<pathelement location="${env.ANT_HOME}/lib/maven-ant-tasks-2.0.10.jar" />
		</classpath>
	</typedef>
			
	<!-- Service Source Path Settings -->
	<path id="src.path">
		<pathelement path="${service.home}/src/main/java"/>
	</path>	

	<!--
      - Sets up the classpath for the Xalan and Xerces implementations
      - that are to be used in this script, since the versions that ship
      - with Ant may be out of date.
      -->
	<path id="xalan.classpath">
		<fileset dir="${xalan.lib.dir}" id="xalan.fileset" />
	</path>

	<!--
      - target:  usage
      -->
	<target name="usage" description="Prints the Ant build.xml usage">
		<echo message="Use -projecthelp to get a list of the available targets." />
	</target>

	<!--
      - target:  clean
      -->
	<target name="clean" description="Cleans up generated files.">
		<delete dir="${target.dir}" />
	</target>

	<!--
      - target:  depends
      -->
	<target name="depends">
		<mkdir dir="${html.dir}" />
		<mkdir dir="${htmlsingle.dir}" />
		<mkdir dir="${pdf.dir}" />
	</target>

	<!--
	- target:  copy 
	- Copies the images from the subdirectories to the target folder
	-->
	<target name="copy">
		<echo message="Copy the images" />
		<copy todir="${target.dir}/image">
			<fileset dir="${image.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<echo message="Copy the download" />
		<copy todir="${target.dir}/download">
			<fileset dir="${download.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<echo message="Copy the fonts" />
		<copy todir="fonts">
			<fileset dir="${font.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
	</target>
	<!--
      - target:  build-html
      - description:  Iterates through a directory and transforms
      -     .xml files into .html files using the DocBook XSL.
      -->
	<target name="build-html" depends="depends" description="Generates HTML files from DocBook XML">
		<xslt style="${html.stylesheet}" extension=".html" basedir="${src.dir}" destdir="${htmlsingle.dir}">
			<include name="${book.name}.xml" />
			<param name="html.stylesheet" expression="anyframe.css" />
			<param name="generate.toc" expression="book toc, title"/>
			<classpath refid="xalan.classpath" />
		</xslt>
		<copy todir="${htmlsingle.dir}">
			<fileset dir="${css.dir}/">
				<include name="anyframe.css" />
			</fileset>
		</copy>
	</target>

	<!--
			- target:  chunks-html
			- description:  Iterates through a directory and transforms
			-     .xml files into separate .html files using the DocBook XSL.
		-->
	<target name="build-chunks" depends="depends" description="Generates chunk HTML files from DocBook XML">
		<xslt style="${chunk-html.stylesheet}" extension=".html" basedir="${src.dir}" destdir="${html.dir}">
			<include name="${book.name}.xml" />
			<param name="html.stylesheet" expression="anyframe.css" />
			<param name="generate.toc" expression="book toc, title"/>
			<classpath refid="xalan.classpath" />
		</xslt>
		<!-- Copy the stylesheet to the same directory as the HTML files -->
		<copy todir="${html.dir}">
			<fileset dir="${css.dir}/">
				<include name="anyframe.css" />
			</fileset>
		</copy>

	</target>

	<target name="build-pdf" depends="depends" description="Generates HTML files from DocBook XML">
		<xslt style="${dbk.fo.stylesheet}" extension=".fo" basedir="${src.dir}" destdir="${fo.dir}" force="true">
			<include name="${book.name}.xml" />
			<param name="admon.graphics.path" expression="${docbook.xsl.dir}/images/" />
			<param name="img.src.path" expression="${image.dir}/" />
			<param name="callout.graphics.path" expression="${image.dir}/common/callouts/" />
			<param name="body.font.family" expression="UnDotum" />
			<param name="generate.toc" expression="book toc, title"/>
			<param name="ignore.image.scaling" expression="1"/>
			<classpath refid="xalan.classpath" />
		</xslt>
				
		<move tofile="${fo.dir}/${book.name}-${version}.fo" file="${fo.dir}/${book.name}.fo"/>
		
		<!-- Convert FO Files into pdf -->
		<fop format="application/pdf" outdir="${pdf.dir}" userconfig="${dbf.home}/conf/fop-config.xml" force="true">
			<fileset dir="${fo.dir}">
				<include name="**/*.fo" />
			</fileset>
		</fop> 
	</target>
	
	<target name="deploy-manual">
		<copy todir="${result.dir}">
			<fileset dir="target">
				<include name="**/**" />
			</fileset>
		</copy>
	</target>
	
	<target name="checkout-service">
		<if>
			<contains string="${version}" substring="SNAPSHOT" casesensitive="false" />
			<then>
				<svn username="${subv.username}" password="${subv.password}">
					<checkout url="${subv.url.service.trunk}" revision="HEAD" destPath="${service.home}" />
				</svn>
			</then>
			<else>
				<svn username="${subv.username}" password="${subv.password}">
					<checkout url="${subv.url.service.tags}" revision="HEAD" destPath="${service.home}" />
				</svn>
			</else>
		</if>
	</target>
	
	<target name="javadoc" depends="checkout-service">
		<echo message="Make Javadoc API" />

		<artifact:pom file="${service.home}/pom.xml" id="service.pomfile" />

		<artifact:dependencies filesetId="service.dependencies" pathId="service.dependencies.path" useScope="compile">
			<pom refid="service.pomfile" />
		</artifact:dependencies>
		
		<mkdir dir="${service.home}/repo-temp" />
		<copy todir="${service.home}/repo-temp" overwrite="true">
			<fileset refid="service.dependencies"/>
			<mapper type="flatten" />
		</copy>

		<javadoc packagenames="org.anyframe.*" sourcepathref="src.path"
			destdir="${result.dir}/${book.name}/${version}/javadoc" author="true" version="true" use="true" Encoding="utf-8"
			windowtitle="Anyframe ${book.name} API ${version}">
			<classpath>
				<path refid="service.dependencies.path" />
			</classpath>
			<doctitle><![CDATA[<h1>Anyframe ${book.name} API ${version}</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2012, www.anyframejava.org, All Rights Reserved.</i>]]></bottom>
			<tag name="todo" scope="all" description="TODO:" />
			<group title="Anyframe" packages="org.anyframe.*" />
			<link href="http://docs.oracle.com/javase/1.5.0/docs/api/" />
			<link href="http://static.springsource.org/spring/docs/3.1.x/javadoc-api/" />
		</javadoc>

		<delete dir="${service.home}/repo-temp" />
	</target>
	
	<!-- target for local build -->
	<target name="all" depends="clean, copy, build-html, build-chunks, build-pdf" />
	<!-- target for CI build -->
	<target name="all-CI" depends="all, deploy-manual, javadoc"/>

</project>